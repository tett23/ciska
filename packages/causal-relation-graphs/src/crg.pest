lb = _{ "\n" | "\n\r" | "\r" }
ws = _{ ( " " | lb )* }
number = _{ '0'..'9' }
intLiteral = { ('1'..'9' ~ number*) | ("-" ~ '1'..'9' ~ number*) }

typeSymbol = { (('A'..'Z' | "_") ~ ('A'..'Z' | 'a'..'z' | '0'..'9' | "_")*) }
varSymbol = { (('a'..'z' | "_") ~ ('A'..'Z' | 'a'..'z' | '0'..'9' | "_")*) }

idLiteral = { "Id" }
emptyLiteral = { "Empty" }
intContextTypeLiteral = { "Int" }
intExpr = _{ intLiteral | ("(" ~ ws? ~ intLiteral ~ ws? ~ ")") }
addLiteral = { "+" ~ intExpr }
stateLiteral = { idLiteral | emptyLiteral | varSymbol }
transitionLiteral = { "=>" ~ stateLiteral }
contextTypeLiteral = { varSymbol ~ ws? ~ ":" ~ ws? ~ effectTypeExpr }

effectLiteral = _{ addLiteral | transitionLiteral | idLiteral | emptyLiteral }
applyLiteral = _{ contextTypeLiteral | idLiteral | emptyLiteral | varSymbol }

stateMachineExpr = { typeLiteral | transitionLiteral }

effectTypeLiteral = { stateMachineExpr | intContextTypeLiteral | typeSymbol }
effectTypeExpr = { effectTypeLiteral }

snapshotTypeLiteral = { "{" ~ ws? ~ snapshotTypeItemLiterals* ~ ws? ~ "}" }
snapshotTypeItemLiterals = _{ snapshotTypeItemLiteral ~ (("," ~ (snapshotTypeItemLiteral))*)? }
snapshotTypeItemLiteral = { ws? ~ (snapshotTypeItemLiteralFull | snapshotTypeItemLiteralShort) ~ ws? }
snapshotTypeItemLiteralFull = _{ ws? ~ varSymbol ~ ws? ~ ":" ~ ws? ~ effectTypeExpr ~ ws? }
snapshotTypeItemLiteralShort = _{ ws? ~ varSymbol ~ ws? }


stateMachineTypeLiteral = { stateLiteral ~ ws? ~ toState+ }
toState = _{ "=>" ~ ws? ~ stateLiteral ~ ws? }

// comment

comment = { lb | ((!lb ~ ANY)* ~ (lb | EOI)) }
commentStart = _{ ws? ~ "//" ~ ws? }
commentLine = _{ commentStart ~ comment }

// typeの定義部分

stateMachineKeyword = { "StateMachine" }
contextKeyword = { "Context" }
snapshotKeyword = { "Snapshot" }
typeKeywords = { stateMachineKeyword | stateMachineKeyword | contextKeyword | snapshotKeyword }
bindTypeExpr = { ws? ~ typeSymbol ~ ws? ~ "::" ~ ws? ~ typeKeywords }
assignTypeExpr = { bindTypeExpr ~ ws? ~ "=" ~ ws? ~ typeExpr }

stateMachineTypeExpr = { stateMachineTypeLiteral }
contextedTypeExpr = { contextTypeLiteral }
snapshotTypeExpr = { snapshotTypeLiteral }
typeLiteral = { stateMachineTypeExpr | contextedTypeExpr | snapshotTypeExpr }

typeAndOp = { "&" }
typeOps = _{ typeAndOp }
typeOp = { ws? ~ typeOps ~ ws? }

typeExpr = { (typeFactor ~ ws? ~ tE) | typeTerm }
typeTerm = _{ ((typeLiteral | typeSymbol) | "(" ~ ws? ~ typeExpr ~ ws? ~ ")") }
typeFactor = _{ ws? ~ typeTerm ~ ws? }
tE = _{ typeOp ~ typeExpr }

typeStmt = { "type" ~ ws ~ (assignTypeExpr | bindTypeExpr) }

// expr

composeOp = { "compose" }
applyOp = { "apply" }
reduceOp = { "reduce" }
pushOp = { "<<" }
ops = _{ composeOp | applyOp | reduceOp | pushOp }
op = { ws ~ ops ~ ws }

snapshotLiteral = { "{" ~ ws? ~ snapshotItemLiterals* ~ ws? ~ "}" }
snapshotValueLiteral = { intLiteral | varSymbol }
snapshotValueExpr = { snapshotValueLiteral }
snapshotItemLiteral = { ws? ~ contextExpr ~ ws? ~ ":" ~ ws? ~ snapshotValueExpr ~ ws? }
snapshotItemLiterals = _{ snapshotItemLiteral ~ (("," ~ (snapshotItemLiteral))*)? }

valueLiteral = _{ effectLiteral | applyLiteral | contextEffectLiteral | sliceLiteral | snapshotLiteral }
sliceLiteral = { "[" ~ ws? ~ (contextEffectExpr ~ (ws? ~ "," ~ws? ~ contextEffectExpr)*)? ~ ws? ~ "]" }
contextLiteral = { contextTypeLiteral }
// 値のContextExprは名前しか必要ないので、contextLiteralは不要かもしれない
contextExpr = { contextLiteral | varSymbol }
effectExpr = { effectLiteral }
contextEffectLiteral = { "(" ~ ws? ~ contextExpr ~ ws? ~ "," ~ ws? ~ effectExpr ~ ws? ~ ")" }
contextEffectExpr = { contextEffectLiteral }

expr = { ws?~ (factor ~ ws? ~ E) | term ~ ws? }
term = { (valueLiteral | "(" ~ ws? ~ expr ~ ws? ~ ")") }
factor = _{ws? ~ term ~ ws?}
// E = _{ op ~ expr }
terminalA = {";"|"}"}
E = _{ op ~ ws? ~ term ~ ws? ~ (E | !EOI) }

calcStmt = _{ expr }

// let 関連

bindKeywords = { "Slice" | "Effect" | "ContextEffect" | "Context" | "Snapshot" }
// bindValuetypeExpr に型の式が書ける必要がある。{a: Int}みたいな
bindValueTypeExpr = { bindKeywords }

bindExpr = { ws? ~ varSymbol ~ ws? ~ "::" ~ ws? ~ bindValueTypeExpr ~ ws? }
assignExpr = { ws? ~ bindExpr ~ ws? ~ "=" ~ ws? ~ expr ~ ws?}
letStmt = { "let" ~ (assignExpr | bindExpr) }

// scope

stmtOrComment = _{stmt|commentLine}
stmtTerminal = { ";" }
scopeInner = _{
  (
    // (commentLine) |
    //((stmtOrComment)+ ~ expr) |
    //((stmtOrComment)+) |
    //(stmt) |
    (stmtOrComment+) |
    (stmtOrComment+ ~ expr) |
    //(expr) |
    //(stmt) |
    (ws?)
    //((commentLine | expr) ) |
    //((commentLine | (scopeStmt | typeStmt | letStmt | calcStmt) ~ ws? ~ ";")+ ~ expr ) |
    //((commentLine | (scopeStmt | typeStmt | letStmt | calcStmt) ~ ws? ~ ";")* )
  )
}
scopeLiteral = {
  ws? ~ "{" ~ ws? ~
  scopeInner ~ ws? ~ "}"
  ~ ws?
}
scopeExpr = { scopeLiteral }
scopeStmt = { scopeExpr }

// stmt

// stmt = { ws? ~ ((!stmtTerminal ~ (scopeExpr | typeExpr | expr)) ~ ws? ~ stmtTerminal)* ~ ws? }
// stmt = { ws? ~ (scopeExpr | typeExpr | expr) ~ ws? ~ ";" ~ ws? }
stmt = { ws? ~ (( scopeStmt | typeStmt | letStmt | calcStmt) ~ ws? ~ ";") }
rootScope = { ws? ~ scopeInner ~ ws? }

document = { SOI ~ rootScope ~ EOI }

// いずれ {} で式を書けるようにする
// Context型がUpperCamelCaseになってしまっている
// reduceではなく、SliceにSnapshotをapplyすればいいのでは？
